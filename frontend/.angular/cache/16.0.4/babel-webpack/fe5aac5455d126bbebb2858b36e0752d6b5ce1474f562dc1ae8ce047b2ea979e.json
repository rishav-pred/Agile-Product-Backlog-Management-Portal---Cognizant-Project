{"ast":null,"code":"import { Userstory } from './userstory';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass UserstoryService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseURL = \"http://localhost:8086/productbacklog/userstories\";\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.options = {\n      headers: this.headers\n    };\n  }\n  getUserStoryLists() {\n    return this.httpClient.get(`${this.baseURL}`);\n  }\n  createUserStory(userStory) {\n    return this.httpClient.post(`${this.baseURL}`, userStory);\n  }\n  getUserstoryById(id) {\n    return this.httpClient.get(`${this.baseURL}/${id}`);\n  }\n  updateUserstory(id, userStory) {\n    return this.httpClient.put(`${this.baseURL}/${id}`, Userstory);\n  }\n}\nUserstoryService.ɵfac = function UserstoryService_Factory(t) {\n  return new (t || UserstoryService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserstoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserstoryService,\n  factory: UserstoryService.ɵfac,\n  providedIn: 'root'\n});\nexport { UserstoryService };\nthis.http.put('http://localhost:8086/productbacklog/userstories/101', requestBody, options).subscribe(response => {\n  // Handle the successful response\n}, error => {\n  // Handle the error response\n});","map":{"version":3,"names":["Userstory","UserstoryService","constructor","httpClient","baseURL","headers","HttpHeaders","options","getUserStoryLists","get","createUserStory","userStory","post","getUserstoryById","id","updateUserstory","put","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","http","requestBody","subscribe","response","error"],"sources":["C:\\Cognizant\\frontend\\src\\app\\userstory.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Userstory } from './userstory';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserstoryService {\n  \n  private baseURL = \"http://localhost:8086/productbacklog/userstories\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  getUserStoryLists() : Observable<Userstory[]>{\n    return this.httpClient.get<Userstory[]>(`${this.baseURL}`);\n  }\n\n\n  createUserStory(userStory: Userstory): Observable<any>{\n    return this.httpClient.post(`${this.baseURL}`, userStory)\n  }\n\n  getUserstoryById(id : number): Observable<Userstory>{\n    return this.httpClient.get<Userstory>(`${this.baseURL}/${id}`);\n  }\n\n  updateUserstory(id: number, userStory: Userstory): Observable<Object>{\n    return this.httpClient.put(`${this.baseURL}/${id}`, Userstory);\n  }\n  const headers = new HttpHeaders({\n    'Content-Type': 'application/json'\n  });\n  \n  const options = { headers: this.headers };\n  \n  this.http.put('http://localhost:8086/productbacklog/userstories/101', requestBody, options)\n    .subscribe(\n      response => {\n        // Handle the successful response\n      },\n      error => {\n        // Handle the error response\n      }\n    );\n  \n}\n"],"mappings":"AAGA,SAASA,SAAS,QAAQ,aAAa;;;AAEvC,MAGaC,gBAAgB;EAI3BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,OAAO,GAAG,kDAAkD;IAoB9D,KAAAC,OAAO,GAAG,IAAIC,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IAEI,KAAAC,OAAO,GAAG;MAAEF,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE;EAtBK;EAE9CG,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACL,UAAU,CAACM,GAAG,CAAc,GAAG,IAAI,CAACL,OAAO,EAAE,CAAC;EAC5D;EAGAM,eAAeA,CAACC,SAAoB;IAClC,OAAO,IAAI,CAACR,UAAU,CAACS,IAAI,CAAC,GAAG,IAAI,CAACR,OAAO,EAAE,EAAEO,SAAS,CAAC;EAC3D;EAEAE,gBAAgBA,CAACC,EAAW;IAC1B,OAAO,IAAI,CAACX,UAAU,CAACM,GAAG,CAAY,GAAG,IAAI,CAACL,OAAO,IAAIU,EAAE,EAAE,CAAC;EAChE;EAEAC,eAAeA,CAACD,EAAU,EAAEH,SAAoB;IAC9C,OAAO,IAAI,CAACR,UAAU,CAACa,GAAG,CAAC,GAAG,IAAI,CAACZ,OAAO,IAAIU,EAAE,EAAE,EAAEd,SAAS,CAAC;EAChE;;AArBWC,gBAAgB,C;mBAAhBA,gBAAgB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAhBnB,gBAAgB,C;SAAhBA,gBAAgB;EAAAoB,OAAA,EAAhBpB,gBAAgB,CAAAqB,IAAA;EAAAC,UAAA,EAFf;AAAM;SAEPtB,gBAAgB;AA4B3B,IAAI,CAACuB,IAAI,CAACR,GAAG,CAAC,sDAAsD,EAAES,WAAW,EAAElB,OAAO,CAAC,CACxFmB,SAAS,CACRC,QAAQ,IAAG;EACT;AAAA,CACD,EACDC,KAAK,IAAG;EACN;AAAA,CACD,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}